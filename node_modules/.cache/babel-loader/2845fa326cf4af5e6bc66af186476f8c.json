{"ast":null,"code":"import _defineProperty from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";import _classCallCheck from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _assertThisInitialized from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";import _inherits from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";import _createSuper from\"C:\\\\Users\\\\Ajmal .M\\\\GitHub\\\\MedianPrimeNumbers(TouchBistro)\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";/*\r\n    NumberInputField.js\r\n    ===========\r\n    React component file for the number input field.\r\n*/import React,{Component}from'react';import\"./NumberInputField.css\";var NumberInputField=/*#__PURE__*/function(_Component){_inherits(NumberInputField,_Component);var _super=_createSuper(NumberInputField);function NumberInputField(){var _this;_classCallCheck(this,NumberInputField);_this=_super.call(this);// number is the user number, errorText is any error text, and median is the displayed median array\n_this.state={number:0,errorText:'',median:'N/A'};_this.onChange=_this.onChange.bind(_assertThisInitialized(_this));_this.onSubmit=_this.onSubmit.bind(_assertThisInitialized(_this));return _this;}// When the user changes the text box contents, change the component's state appropriately\n_createClass(NumberInputField,[{key:\"onChange\",value:function onChange(e){this.setState(_defineProperty({},e.target.name,e.target.value));}// When there is an error, display relevant error text\n},{key:\"onError\",value:function onError(errText){var _this2=this;this.setState(function(previousState,props){return{errorText:errText+\" ('\"+_this2.state.number+\"')\",median:\"N/A\"};});}// When the user submits the number to the server\n},{key:\"onSubmit\",value:function onSubmit(e){var _this3=this;e.preventDefault();console.log(\"> Submitting form\");//console.log(this.state);\n// Perform POST request to server\n// Send this component's state as body data\nfetch('http://localhost:3000/setprime',{method:'POST',body:JSON.stringify(this.state)})// When a response is given...\n.then(function(r){//console.log(r);\n// If there is an error (200 is OK)\nif(r.status!==200){throw r.statusText;}return r.json();})// Data is exposed after response stream is finished\n.then(function(data){//console.log(data);\n// Set state to received data and no error\n_this3.setState(function(previousState,props){return{errorText:'',median:data};});})// Show appropriate error text\n.catch(function(e){//console.log(e);\n_this3.onError(e.toString());});}// Render component.\n// Includes text box, submit button, error label, and median array label\n},{key:\"render\",value:function render(){return/*#__PURE__*/React.createElement(\"div\",{className:\"col-sm\"},/*#__PURE__*/React.createElement(\"div\",{align:\"center\"},/*#__PURE__*/React.createElement(\"form\",{onSubmit:this.onSubmit},/*#__PURE__*/React.createElement(\"input\",{id:\"txtNum\",type:\"text\",name:\"number\",onChange:this.onChange,className:\"form-control\"}),/*#__PURE__*/React.createElement(\"button\",{id:\"btnSubmit\",type:\"submit\",className:\"btn btn-primary\"},\"Submit\")),/*#__PURE__*/React.createElement(\"p\",{id:\"lblError\"},this.state.errorText),/*#__PURE__*/React.createElement(\"p\",{id:\"lblMedian\"},\"Median: \",this.state.median.toString())));}}]);return NumberInputField;}(Component);export default NumberInputField;","map":{"version":3,"sources":["C:/Users/Ajmal .M/GitHub/MedianPrimeNumbers(TouchBistro)/src/components/NumberInputField.js"],"names":["React","Component","NumberInputField","state","number","errorText","median","onChange","bind","onSubmit","e","setState","target","name","value","errText","previousState","props","preventDefault","console","log","fetch","method","body","JSON","stringify","then","r","status","statusText","json","data","catch","onError","toString"],"mappings":"klCAAA;;;;EAMA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAO,wBAAP,C,GAEMC,CAAAA,gB,oHAEF,2BAAc,kDACV,wBAEA;AACA,MAAKC,KAAL,CAAa,CACTC,MAAM,CAAE,CADC,CAETC,SAAS,CAAE,EAFF,CAGTC,MAAM,CAAE,KAHC,CAAb,CAMA,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcC,IAAd,+BAAhB,CACA,MAAKC,QAAL,CAAgB,MAAKA,QAAL,CAAcD,IAAd,+BAAhB,CAXU,aAYb,CAED;uEACSE,C,CAAG,CACR,KAAKC,QAAL,oBAAiBD,CAAC,CAACE,MAAF,CAASC,IAA1B,CAAiCH,CAAC,CAACE,MAAF,CAASE,KAA1C,GACH,CAED;wCACQC,O,CAAS,iBACb,KAAKJ,QAAL,CAAc,SAACK,aAAD,CAAgBC,KAAhB,CAA0B,CACpC,MAAO,CACHZ,SAAS,CAAEU,OAAO,CAAG,KAAV,CAAkB,MAAI,CAACZ,KAAL,CAAWC,MAA7B,CAAsC,IAD9C,CAEHE,MAAM,CAAE,KAFL,CAAP,CAIH,CALD,EAMH,CAED;0CACSI,C,CAAG,iBACRA,CAAC,CAACQ,cAAF,GACAC,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACA;AAEA;AACA;AACAC,KAAK,CAAC,gCAAD,CAAmC,CACpCC,MAAM,CAAE,MAD4B,CAEpCC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAe,KAAKtB,KAApB,CAF8B,CAAnC,CAID;AAJJ,CAKKuB,IALL,CAKU,SAAAC,CAAC,CAAI,CACP;AAEA;AACA,GAAIA,CAAC,CAACC,MAAF,GAAa,GAAjB,CAAsB,CAClB,KAAMD,CAAAA,CAAC,CAACE,UAAR,CACH,CACD,MAAOF,CAAAA,CAAC,CAACG,IAAF,EAAP,CACH,CAbL,CAcI;AAdJ,CAeKJ,IAfL,CAeU,SAAAK,IAAI,CAAI,CACV;AAEA;AACA,MAAI,CAACpB,QAAL,CAAc,SAACK,aAAD,CAAgBC,KAAhB,CAA0B,CACpC,MAAO,CACHZ,SAAS,CAAE,EADR,CAEHC,MAAM,CAAEyB,IAFL,CAAP,CAIH,CALD,EAMH,CAzBL,CA0BI;AA1BJ,CA2BKC,KA3BL,CA2BW,SAAAtB,CAAC,CAAI,CACR;AACA,MAAI,CAACuB,OAAL,CAAavB,CAAC,CAACwB,QAAF,EAAb,EACH,CA9BL,EA+BH,CAED;AACA;uCACS,CACL,mBACI,2BAAK,SAAS,CAAC,QAAf,eACI,2BAAK,KAAK,CAAC,QAAX,eACI,4BAAM,QAAQ,CAAE,KAAKzB,QAArB,eACI,6BAAO,EAAE,CAAC,QAAV,CAAmB,IAAI,CAAC,MAAxB,CAA+B,IAAI,CAAC,QAApC,CAA6C,QAAQ,CAAE,KAAKF,QAA5D,CAAsE,SAAS,CAAC,cAAhF,EADJ,cAEI,8BAAQ,EAAE,CAAC,WAAX,CAAuB,IAAI,CAAC,QAA5B,CAAqC,SAAS,CAAC,iBAA/C,WAFJ,CADJ,cAKI,yBAAG,EAAE,CAAC,UAAN,EAAkB,KAAKJ,KAAL,CAAWE,SAA7B,CALJ,cAMI,yBAAG,EAAE,CAAC,WAAN,aAA2B,KAAKF,KAAL,CAAWG,MAAX,CAAkB4B,QAAlB,EAA3B,CANJ,CADJ,CADJ,CAcH,C,8BAzF0BjC,S,EA6F/B,cAAeC,CAAAA,gBAAf","sourcesContent":["/*\r\n    NumberInputField.js\r\n    ===========\r\n    React component file for the number input field.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport \"./NumberInputField.css\";\r\n\r\nclass NumberInputField extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // number is the user number, errorText is any error text, and median is the displayed median array\r\n        this.state = {\r\n            number: 0,\r\n            errorText: '',\r\n            median: 'N/A'\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    // When the user changes the text box contents, change the component's state appropriately\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    // When there is an error, display relevant error text\r\n    onError(errText) {\r\n        this.setState((previousState, props) => {\r\n            return {\r\n                errorText: errText + \" ('\" + this.state.number + \"')\",\r\n                median: \"N/A\"\r\n            }\r\n        })\r\n    }\r\n\r\n    // When the user submits the number to the server\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        console.log(\"> Submitting form\");\r\n        //console.log(this.state);\r\n\r\n        // Perform POST request to server\r\n        // Send this component's state as body data\r\n        fetch('http://localhost:3000/setprime', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state),\r\n        })\r\n            // When a response is given...\r\n            .then(r => {\r\n                //console.log(r);\r\n\r\n                // If there is an error (200 is OK)\r\n                if (r.status !== 200) {\r\n                    throw r.statusText;\r\n                }\r\n                return r.json();\r\n            })\r\n            // Data is exposed after response stream is finished\r\n            .then(data => {\r\n                //console.log(data);\r\n\r\n                // Set state to received data and no error\r\n                this.setState((previousState, props) => {\r\n                    return {\r\n                        errorText: '',\r\n                        median: data\r\n                    }\r\n                })\r\n            })\r\n            // Show appropriate error text\r\n            .catch(e => {\r\n                //console.log(e);\r\n                this.onError(e.toString());\r\n            })\r\n    }\r\n\r\n    // Render component.\r\n    // Includes text box, submit button, error label, and median array label\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm\">\r\n                <div align=\"center\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input id=\"txtNum\" type=\"text\" name=\"number\" onChange={this.onChange} className=\"form-control\" />\r\n                        <button id=\"btnSubmit\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </form>\r\n                    <p id=\"lblError\">{this.state.errorText}</p>\r\n                    <p id=\"lblMedian\">Median: {this.state.median.toString()}</p>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default NumberInputField;"]},"metadata":{},"sourceType":"module"}