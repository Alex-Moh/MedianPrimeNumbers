{"version":3,"sources":["components/NumberInputField.js","App.js","index.js"],"names":["NumberInputField","state","number","errorText","median","onChange","bind","onSubmit","e","this","setState","target","name","value","errText","previousState","props","preventDefault","console","log","fetch","method","body","JSON","stringify","then","r","status","statusText","json","data","catch","onError","toString","className","align","id","type","Component","App","href","ReactDOM","render","document","getElementById"],"mappings":"ySAsGeA,G,wDA3FX,aAAe,IAAD,8BACV,gBAGKC,MAAQ,CACTC,OAAQ,EACRC,UAAW,GACXC,OAAQ,OAGZ,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBAXN,E,qDAeLE,GACLC,KAAKC,SAAL,eAAiBF,EAAEG,OAAOC,KAAOJ,EAAEG,OAAOE,U,8BAItCC,GAAU,IAAD,OACbL,KAAKC,UAAS,SAACK,EAAeC,GAC1B,MAAO,CACHb,UAAWW,EAAU,MAAQ,EAAKb,MAAMC,OAAS,KACjDE,OAAQ,Y,+BAMXI,GAAI,IAAD,OACRA,EAAES,iBACFC,QAAQC,IAAI,qBAKZC,MAAM,iCAAkC,CACpCC,OAAQ,OACRC,KAAMC,KAAKC,UAAUf,KAAKR,SAGzBwB,MAAK,SAAAC,GAIF,GAAiB,MAAbA,EAAEC,OACF,MAAMD,EAAEE,WAEZ,OAAOF,EAAEG,UAGZJ,MAAK,SAAAK,GAIF,EAAKpB,UAAS,SAACK,EAAeC,GAC1B,MAAO,CACHb,UAAW,GACXC,OAAQ0B,SAKnBC,OAAM,SAAAvB,GAEH,EAAKwB,QAAQxB,EAAEyB,iB,+BAOvB,OACI,yBAAKC,UAAU,UACX,yBAAKC,MAAM,UACP,0BAAM5B,SAAUE,KAAKF,UACjB,2BAAO6B,GAAG,SAASC,KAAK,OAAOzB,KAAK,SAASP,SAAUI,KAAKJ,SAAU6B,UAAU,iBAChF,4BAAQE,GAAG,YAAYC,KAAK,SAASH,UAAU,mBAA/C,WAEJ,uBAAGE,GAAG,YAAY3B,KAAKR,MAAME,WAC7B,uBAAGiC,GAAG,aAAN,WAA2B3B,KAAKR,MAAMG,OAAO6B,kB,GAnFlCK,c,MC4BhBC,MA3Bf,WACE,OACE,yBAAKL,UAAU,OACb,yBAAKA,UAAU,aAEb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,wBAAIA,UAAU,UAAd,gBACA,uBAAGA,UAAU,eAAb,sHAIJ,yBAAKA,UAAU,OACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,4BAAQA,UAAU,UAChB,+DAAoC,uBAAGM,KAAK,+BAAR,iBCvBlDC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.ccf732f5.chunk.js","sourcesContent":["/*\r\n    NumberInputField.js\r\n    ===========\r\n    React component file for the number input field.\r\n*/\r\n\r\nimport React, { Component } from 'react';\r\nimport \"./NumberInputField.css\";\r\n\r\nclass NumberInputField extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        // number is the user number, errorText is any error text, and median is the displayed median array\r\n        this.state = {\r\n            number: 0,\r\n            errorText: '',\r\n            median: 'N/A'\r\n        }\r\n\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    // When the user changes the text box contents, change the component's state appropriately\r\n    onChange(e) {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    // When there is an error, display relevant error text\r\n    onError(errText) {\r\n        this.setState((previousState, props) => {\r\n            return {\r\n                errorText: errText + \" ('\" + this.state.number + \"')\",\r\n                median: \"N/A\"\r\n            }\r\n        })\r\n    }\r\n\r\n    // When the user submits the number to the server\r\n    onSubmit(e) {\r\n        e.preventDefault();\r\n        console.log(\"> Submitting form\");\r\n        //console.log(this.state);\r\n\r\n        // Perform POST request to server\r\n        // Send this component's state as body data\r\n        fetch('http://localhost:3000/setprime', {\r\n            method: 'POST',\r\n            body: JSON.stringify(this.state),\r\n        })\r\n            // When a response is given...\r\n            .then(r => {\r\n                //console.log(r);\r\n\r\n                // If there is an error (200 is OK)\r\n                if (r.status !== 200) {\r\n                    throw r.statusText;\r\n                }\r\n                return r.json();\r\n            })\r\n            // Data is exposed after response stream is finished\r\n            .then(data => {\r\n                //console.log(data);\r\n\r\n                // Set state to received data and no error\r\n                this.setState((previousState, props) => {\r\n                    return {\r\n                        errorText: '',\r\n                        median: data\r\n                    }\r\n                })\r\n            })\r\n            // Show appropriate error text\r\n            .catch(e => {\r\n                //console.log(e);\r\n                this.onError(e.toString());\r\n            })\r\n    }\r\n\r\n    // Render component.\r\n    // Includes text box, submit button, error label, and median array label\r\n    render() {\r\n        return (\r\n            <div className=\"col-sm\">\r\n                <div align=\"center\">\r\n                    <form onSubmit={this.onSubmit}>\r\n                        <input id=\"txtNum\" type=\"text\" name=\"number\" onChange={this.onChange} className=\"form-control\" />\r\n                        <button id=\"btnSubmit\" type=\"submit\" className=\"btn btn-primary\">Submit</button>\r\n                    </form>\r\n                    <p id=\"lblError\">{this.state.errorText}</p>\r\n                    <p id=\"lblMedian\">Median: {this.state.median.toString()}</p>\r\n                </div>\r\n            </div>\r\n\r\n        );\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default NumberInputField;","/*\r\n    App.js\r\n    ===========\r\n    Primary React entry point\r\n*/\r\n\r\nimport React from 'react';\r\nimport NumberInputField from './components/NumberInputField';\r\nimport \"./App.css\"\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"container\">\r\n        {/* This row is for the header and site description */}\r\n        <div className=\"row\">\r\n          <div className=\"col-sm\">\r\n            <h1 className=\"header\">MedianPrimes</h1>\r\n            <p className=\"description\">Enter a number and click submit. You will receive the median element(s) of the list of primes under that number.</p>\r\n          </div>\r\n        </div>\r\n        {/* This row is just for the number input */}\r\n        <div className=\"row\">\r\n          <NumberInputField />\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-sm\">\r\n            <footer className=\"footer\">\r\n              <h6>Developed by AjmalTheDeveloper. <a href=\"https://github.com/Alex-Moh\">GitHub</a></h6>\r\n            </footer>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n// import React from 'react';\r\n// import './App.css';\r\n// //import TextField from '@material-ui/core/TextField';\r\n// import Button from '@material-ui/core/Button';\r\n// import axios from 'axios';\r\n\r\n// class Primes extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.onFormSubmit = this.onFormSubmit.bind(this);\r\n//     this.fetchPrimes = this.fetchPrimes.bind(this);\r\n//     this.state = { primes: '' };\r\n//   }\r\n\r\n//   onFormSubmit(e) {\r\n//     e.preventDefault();\r\n//     this.fetchPrimes(e.target.elements.number.value);\r\n//   }\r\n\r\n//   fetchPrimes(number) {\r\n//     axios.get(`http://localhost:3000/${number}`).then((res) => {\r\n//       this.setState({ primes: JSON.stringify(res.data) });\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     const { primes } = this.state;\r\n//     return (\r\n//       <div className=\"App\">\r\n//         <p>Find prime numbers smaller than</p>\r\n//         <form onSubmit={this.onFormSubmit}>\r\n//           {/* <TextField\r\n//             id=\"standard-bare\"\r\n//             defaultValue=\"\"\r\n//             margin=\"normal\"\r\n//             name=\"number\"\r\n//           /> */}\r\n//           <Button variant=\"contained\" type=\"submit\">Calculate</Button>\r\n//         </form>\r\n//         <p>{primes}</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default Primes;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}